#!/bin/bash

# Service control script for managing stuff around MySQL/MariaDB.
#
# @author    Oktay Acikalin <oktay.acikalin@gmail.com>
# @copyright Oktay Acikalin
# @license   MIT (LICENSE.txt)

[ -z "$SERVICE_DIR" ] && SERVICE_DIR=$(readlink -f $(dirname $0))
[ -z "$BASE_DIR" ] && source "${SERVICE_DIR}/service.conf"

import "lib/service.run_main"
import "lib/var.default"
import "lib/proc.wait_for_pid_in_file"
import "lib/assert.is_dir"
import "lib/mysql.get_table_timestamp"
import "lib/mysql.get_table_list"
import "lib/file.get_relative_path"

import "etc/default/mysql"

SERVICE_LOG_FILE="$MYSQL_ERROR_LOG"

mkdir -p "$(dirname ${MYSQL_SOCKET})"
mkdir -p "${MYSQL_DATA_DIR}"
mkdir -p "$(dirname ${MYSQL_ERROR_LOG})"
mkdir -p "${MYSQL_BACKUP_DIR}"


assert.is_dir "${ETC_DIR}/mysql" "Missing configuration in: ${ETC_DIR}/mysql"


function fill () {
    local template=$1
    sed -e "s!\${BASE_DIR}!${BASE_DIR}!g" \
        -e "s!\${MYSQL_HOST}!${MYSQL_HOST}!g" \
        -e "s!\${MYSQL_PORT}!${MYSQL_PORT}!g" \
        -e "s!\${MYSQL_USER}!${MYSQL_USER}!g" \
        -e "s!\${MYSQL_PASS}!${MYSQL_PASS}!g" \
        -e "s!\${MYSQL_SOCKET}!${MYSQL_SOCKET}!g" \
        -e "s!\${MYSQL_PID}!${MYSQL_PID}!g" \
        -e "s!\${MYSQL_DATA_DIR}!${MYSQL_DATA_DIR}!g" \
        -e "s!\${MYSQL_ERROR_LOG}!${MYSQL_ERROR_LOG}!g" \
        <<< "${template}"
}

[ -e "${MYSQL_CONF}" ] || fill "$(cat ${ETC_DIR}/mysql/mysql.conf)" > ${MYSQL_CONF}
[ -e "${MYSQL_ADMIN_CONF}" ] || fill "$(cat ${ETC_DIR}/mysql/mysql-admin.conf)" > ${MYSQL_ADMIN_CONF}

function ensure_innodb_barracuda_config () {
    [ -e "${ETC_DIR}/mysql/conf.d/innodb_barracuda_format.cnf" ] || {
        echo -n ' Adding symlink for using InnoDB Barracuda format... '
        ln -s "${SERVICE_ROOT_DIR}/etc/mysql/conf.d/innodb_barracuda_format.cnf" \
            "${ETC_DIR}/mysql/conf.d/innodb_barracuda_format.cnf"
    }
}

function ensure_innodb_barracuda_online () {
    SQL="
    SET GLOBAL innodb_file_format = Barracuda;
    SET GLOBAL innodb_file_format_max = Barracuda;
    # SET GLOBAL innodb_compression_level = 6;
    "
    mysql ${MYSQL_CONNECTION_PARAMS} -e "$SQL"
}

function _alter_tables () {
    local modification="$1"
    SQL="
    USE INFORMATION_SCHEMA;
    SELECT CONCAT(\"ALTER TABLE \`\", TABLE_SCHEMA,\"\`.\`\", TABLE_NAME, \"\` ${modification};\") AS MySQLCMD
        FROM TABLES
        WHERE ENGINE = \"InnoDB\";
    "
    SQL=$(mysql ${MYSQL_CONNECTION_PARAMS} --batch --skip-column-names -e "$SQL")
    readarray -t SQL <<<"$SQL"

    echo -n " Altering ${#SQL[@]} tables... "

    for statement in "${SQL[@]}"; do
        echo -n '.'
        mysql ${MYSQL_CONNECTION_PARAMS} -e "${statement}"
    done
}

function set_innodb_table_row_format () {
    FORMAT=$1
    _alter_tables "ROW_FORMAT=${FORMAT}"
}

# NOTE: AFAIK only supported by Fusion-io.
# function enable_innodb_table_page_compression () {
#     _alter_tables "PAGE_COMPRESSED=1"
# }

# NOTE: AFAIK only supported by Fusion-io.
# function disable_innodb_table_page_compression () {
#     _alter_tables "PAGE_COMPRESSED=0"
# }


function mysql.list_tables_like () {
    local database="$1"
    local pattern="$2"
    local sql="
        SET group_concat_max_len = 10240;
        SELECT GROUP_CONCAT(table_name separator ' ')
        FROM information_schema.tables WHERE table_schema='${database}'
        AND table_name LIKE '${pattern}'
    "
    local output=$(mysql ${MYSQL_CONNECTION_PARAMS} -AN -e "${sql}")
    if [ "${output}" != "NULL" ]; then
        echo "${output}"
    else
        echo "INFO: No tables found in database ${database} like: ${pattern}" >&2
    fi
}


function main () {
    case "$COMMAND" in
        'disable-init-script')
            sudo sh -c 'echo "manual" > /etc/init/mysql.override'
        ;;

        'enable-init-script')
            sudo rm '/etc/init/mysql.override'
        ;;

        'install')
            mysql_install_db --defaults-file="${MYSQL_CONF}"
            $0 start
            mysqladmin --defaults-file="${MYSQL_CONF}" -u "${MYSQL_USER}" password "${MYSQL_PASS}"
            # mysqladmin --defaults-file="${MYSQL_CONF}" -h localhost -u "${MYSQL_USER}" password "${MYSQL_PASS}"
        ;;

        'reconfigure')
            fill "$(cat ${ETC_DIR}/mysql/mysql.conf)" > ${MYSQL_CONF}
            fill "$(cat ${ETC_DIR}/mysql/mysql-admin.conf)" > ${MYSQL_ADMIN_CONF}
        ;;

        'start')
            start-stop-daemon --start --quiet --pidfile "$MYSQL_PID" --chdir "$BASE_DIR" --background --exec /usr/sbin/mysqld \
                --test \
                || exit 97
            start-stop-daemon --start --pidfile "$MYSQL_PID" --chdir "$BASE_DIR" --background --exec /usr/sbin/mysqld \
                -- --defaults-file="${MYSQL_CONF}"
            proc.wait_for_pid_in_file "${MYSQL_PID}"
        ;;

        'stop')
            start-stop-daemon --stop --pidfile "$MYSQL_PID" --retry 30
            RETVAL="$?"
            [ "$RETVAL" = 2 ] && exit 2
            [ "$RETVAL" = 1 ] && exit 98
            rm -f ${MYSQL_PID}
            exit "$RETVAL"
        ;;

        'restart')
            $0 stop
            RETVAL=$?
            if [ $RETVAL = 0 ] || [ $RETVAL = 98 ]; then
                $0 start
            else
                exit "$RETVAL"
            fi
        ;;

        'shell')
            echo  # Put the prompt into a new line.
            mysql ${MYSQL_CONNECTION_PARAMS} "${@:2}"
        ;;

        'mytop')
            mytop --socket="${MYSQL_SOCKET}"
        ;;

        'mysqltuner')
            mysqltuner --forcemem 8192 --forceswap 8192 --socket="${MYSQL_SOCKET}"
        ;;

        'set-innodb-table-row-format-compact')
            echo -n '.'
            ensure_innodb_barracuda_config
            echo -n '.'
            ensure_innodb_barracuda_online
            echo -n '.'
            set_innodb_table_row_format COMPACT

            echo -n ' '
        ;;

        'set-innodb-table-row-format-compressed')
            echo -n '.'
            ensure_innodb_barracuda_config
            echo -n '.'
            ensure_innodb_barracuda_online
            echo -n '.'
            set_innodb_table_row_format COMPRESSED

            echo -n ' '
        ;;

        # NOTE: AFAIK only supported by Fusion-io.
        # 'enable-innodb-table-page-compression')
        #     echo -n '.'
        #     ensure_innodb_barracuda_config
        #     echo -n '.'
        #     ensure_innodb_barracuda_online
        #     echo -n '.'
        #     enable_innodb_table_page_compression

        #     echo -n ' '
        # ;;

        # NOTE: AFAIK only supported by Fusion-io.
        # 'disable-innodb-table-page-compression')
        #     echo -n '.'
        #     ensure_innodb_barracuda_config
        #     echo -n '.'
        #     ensure_innodb_barracuda_online
        #     echo -n '.'
        #     disable_innodb_table_page_compression

        #     echo -n ' '
        # ;;

        'backup')
            # TODO backup should only hold n backups (defaults to 5).
            local requested="${@:2}"
            local cur_timestamp="$(date '+%s')"

            echo  # Put the prompt into a new line.

            # If no databases have been requested, take them all.
            if [ -z "${requested[@]}" ]; then
                requested=($(echo "show databases;" | mysql ${MYSQL_CONNECTION_PARAMS} -B -N | grep -v -E '^(information_schema|mysql|performance_schema)$'))
            fi

            for request in "${requested[@]}"; do
                request=(${request//:/ })
                # TODO Make use of mysql.list_tables_like here.
                tables=(${request[1]//,/ })
                local database="${request[0]}"
                local backup_dir="${MYSQL_BACKUP_DIR}/${database}/${cur_timestamp}"
                local previous_backup_dir="$(find ${MYSQL_BACKUP_DIR}/${database}/ -maxdepth 1 -mindepth 1 -type d 2>/dev/null | sort | tail -n1)"

                # If no tables have been requested, take them all.
                if [ ${#tables} = 0 ]; then
                    tables=($(mysql.get_table_list "${MYSQL_CONNECTION_PARAMS}" "${database}"))
                fi

                if [ -z "${previous_backup_dir}" ]; then
                    echo "No previous backup for ${database} found."
                fi

                # Analyze situation.
                local changed_tables=()
                local unchanged_tables=()
                local changelog=()
                local table
                local timestamp
                local old_timestamp=${previous_backup_dir##*/}
                changelog+=("table,timestamp_before,timestamp_now")

                for table in "${tables[@]}"; do
                    timestamp=$(mysql.get_table_timestamp "${MYSQL_CONNECTION_PARAMS}" "${database}" "${table}")
                    # Find table in older backup (if it exists).
                    if [ -n "${previous_backup_dir}" ] && [ -e "${previous_backup_dir}/${table}.sql.gz" ]; then
                        if [[ ${timestamp} > ${old_timestamp} ]]; then
                            changed_tables+=("${table}")
                            changelog+=("${table},${old_timestamp},${timestamp}")
                        else
                            unchanged_tables+=("${table}")
                        fi
                    else
                        changed_tables+=("${table}")
                        changelog+=("${table},0,${timestamp}")
                    fi
                    echo
                done > >(pv --name "Analyzing ${database}" --size ${#tables[@]} --line-mode --timer --eta --progress --cursor > /dev/null)
                echo

                # Do we have any changes?
                if [ ${#changed_tables} != 0 ]; then
                    mkdir -p "${backup_dir}"

                    for record in "${changelog[@]}"; do
                        echo "${record}" >> "${backup_dir}/changelog.csv"
                    done

                    echo "Status: ${#changed_tables[@]} added/changed, ${#unchanged_tables[@]} unchanged"

                    # First link all unchanged_tables.
                    if [ ${#unchanged_tables} != 0 ]; then
                        pushd "${backup_dir}" > /dev/null
                        for table in "${unchanged_tables[@]}"; do
                            echo "${table} "
                            ln ../${previous_backup_dir##*/}/${table}.* .
                        done | pv --name "Linking tables" --size ${#unchanged_tables[@]} --line-mode --timer --eta --progress --cursor > /dev/null
                        popd > /dev/null
                    fi

                    # Now dump all changed_tables.
                    for table in "${changed_tables[@]}"; do
                        mysqldump ${MYSQL_CONNECTION_PARAMS} -T "${backup_dir}" "${database}" "${table}"
                        echo "${table}: Backed up"
                        gzip "${backup_dir}/${table}."*
                        echo "${table}: Compressed files"
                    done | pv --name "Backing up tables" --size $((${#changed_tables[@]} * 2)) --line-mode --timer --eta --progress --cursor > /dev/null
                else
                    echo "Nothing changed."
                fi
            done
        ;;

        'restore')
            # TODO Give option to choose timestamp for full restore.
            # TODO Make sure that the database exists, and if not do a full restore.
            local requested="${@:2}"
            local cur_timestamp="$(date '+%s')"
            local prepare_sql_file="${SERVICE_ROOT_DIR}/scripts/mysql-import-optimizations.sql"

            echo  # Put the prompt into a new line.

            # If no databases have been requested, take them all.
            if [ -z "${requested[@]}" ]; then
                requested=($(echo "show databases;" | mysql ${MYSQL_CONNECTION_PARAMS} -B -N | grep -v -E '^(information_schema|mysql|performance_schema)$'))
            fi

            for request in "${requested[@]}"; do
                request=(${request//:/ })
                # TODO Make use of mysql.list_tables_like here.
                tables=(${request[1]//,/ })
                local database="${request[0]}"
                # local backup_dir="${MYSQL_BACKUP_DIR}/${database}/${cur_timestamp}"
                local previous_backup_dir="$(find ${MYSQL_BACKUP_DIR}/${database}/ -maxdepth 1 -mindepth 1 -type d 2>/dev/null | sort | tail -n1)"

                # If no tables have been requested, take them all.
                if [ ${#tables} = 0 ]; then
                    tables=($(mysql.get_table_list "${MYSQL_CONNECTION_PARAMS}" "${database}"))
                fi

                if [ -z "${previous_backup_dir}" ]; then
                    echo "No previous backup for ${database} found."
                    exit 1
                fi

                # Analyze situation.
                local changed_tables=()
                local unchanged_tables=()
                # local changelog=()
                local table
                local timestamp
                local old_timestamp=${previous_backup_dir##*/}
                # changelog+=("table,timestamp_before,timestamp_now")

                for table in "${tables[@]}"; do
                    timestamp=$(mysql.get_table_timestamp "${MYSQL_CONNECTION_PARAMS}" "${database}" "${table}")
                    # Find table in older backup (if it exists).
                    if [ -n "${previous_backup_dir}" ] && [ -e "${previous_backup_dir}/${table}.sql.gz" ]; then
                        if [[ ${timestamp} > ${old_timestamp} ]]; then
                            changed_tables+=("${table}")
                            # changelog+=("${table},${old_timestamp},${timestamp}")
                        else
                            unchanged_tables+=("${table}")
                        fi
                    else
                        changed_tables+=("${table}")
                        # changelog+=("${table},0,${timestamp}")
                    fi
                    echo
                done > >(pv --name "Analyzing ${database}" --size ${#tables[@]} --line-mode --timer --eta --progress --cursor > /dev/null)
                echo

                # Do we have any changes?
                if [ ${#changed_tables} != 0 ]; then
                    echo "Status: ${#changed_tables[@]} added/changed, ${#unchanged_tables[@]} unchanged"

                    # Now restore all changed_tables.
                    local file
                    local fifo
                    pushd "${MYSQL_DATA_DIR}" > /dev/null
                    for table in "${changed_tables[@]}"; do
                        sql_file="${previous_backup_dir}/${table}.sql.gz"
                        sql_file="$(file.get_relative_path "${MYSQL_DATA_DIR}" "${sql_file}")"
                        data_file="${previous_backup_dir}/${table}.txt.gz"
                        data_file="$(file.get_relative_path "${MYSQL_DATA_DIR}" "${data_file}")"
                        # http://dev.mysql.com/doc/refman/5.0/en/load-data.html
                        fifo="${table}.txt"
                        rm -f "${fifo}"
                        mkfifo "${fifo}"
                        {
                            cat "${prepare_sql_file}"
                            zcat "${sql_file}"
                            echo "SELECT '${table}: Restored structure';"

                            gunzip -c "${data_file}" > "${fifo}" &
                            # This is non-blocking, therefore we remove the fifo later on.
                            echo "LOAD DATA INFILE './${fifo}' INTO TABLE ${table} CHARACTER SET UTF8;"
                            echo "SELECT '${table}: Restored data';"

                            echo "FLUSH TABLES ${table} WITH READ LOCK;"
                            echo "SELECT '${table}: Flushed to disk';"
                        } \
                            | mysql ${MYSQL_CONNECTION_PARAMS} "${database}" -N
                        # Finally remove the fifo after the database is really done.
                        rm "${fifo}"
                        # Restore timestamps for all table files to the lastest of the backup.
                        local stamp=$(date --date="@${old_timestamp}" +"%Y%m%d%H%M.%S")
                        ( sleep 1; touch -t "${stamp}" "${database}/${table}."* ) &
                    done \
                        | pv --name "Restoring tables" --size $((${#changed_tables[@]} * 3)) --line-mode --timer --eta --progress --cursor > /dev/null
                    popd > /dev/null
                else
                    echo "Nothing changed."
                fi
            done
        ;;

        'diff')
            # TODO find changes, dump changed tables into tmp dir, diff the files to the previous dump.
        ;;

        'watch')
            watch -n1 "mysql ${MYSQL_CONNECTION_PARAMS} information_schema --skip-column-names --execute 'SELECT DB, STATE, TIME, PROGRESS, INFO FROM PROCESSLIST WHERE DB != \"information_schema\";'"
        ;;

        'NOOP')
            # NOOP
        ;;
    esac
}


service.run_main "$@"
