#!/bin/bash

# Service control script for managing stuff around MySQL/MariaDB.
#
# @author    Oktay Acikalin <oktay.acikalin@gmail.com>
# @copyright Oktay Acikalin
# @license   MIT (LICENSE.txt)

[ -z "$SERVICE_DIR" ] && SERVICE_DIR=$(readlink -f $(dirname $0))
[ -z "$BASE_DIR" ] && source "${SERVICE_DIR}/service.conf"

import "lib/service.run_main"
import "lib/var.default"
import "lib/proc.wait_for_pid_in_file"

import "etc/default/mysql"

SERVICE_LOG_FILE="$MYSQL_ERROR_LOG"

mkdir -p "$(dirname ${MYSQL_SOCKET})"
mkdir -p "${MYSQL_DATA_DIR}"
mkdir -p "$(dirname ${MYSQL_ERROR_LOG})"
mkdir -p "${MYSQL_BACKUP_DIR}"

function fill () {
    local template=$1
    sed -e "s!\${BASE_DIR}!${BASE_DIR}!g" \
        -e "s!\${MYSQL_HOST}!${MYSQL_HOST}!g" \
        -e "s!\${MYSQL_PORT}!${MYSQL_PORT}!g" \
        -e "s!\${MYSQL_USER}!${MYSQL_USER}!g" \
        -e "s!\${MYSQL_PASS}!${MYSQL_PASS}!g" \
        -e "s!\${MYSQL_SOCKET}!${MYSQL_SOCKET}!g" \
        -e "s!\${MYSQL_PID}!${MYSQL_PID}!g" \
        -e "s!\${MYSQL_DATA_DIR}!${MYSQL_DATA_DIR}!g" \
        -e "s!\${MYSQL_ERROR_LOG}!${MYSQL_ERROR_LOG}!g" \
        <<< "${template}"
}

[ -e "${MYSQL_CONF}" ] || fill "$(cat ${ETC_DIR}/mysql/mysql.conf)" > ${MYSQL_CONF}
[ -e "${MYSQL_ADMIN_CONF}" ] || fill "$(cat ${ETC_DIR}/mysql/mysql-admin.conf)" > ${MYSQL_ADMIN_CONF}

function ensure_innodb_barracuda_config () {
    [ -e "${ETC_DIR}/mysql/conf.d/innodb_barracuda_format.cnf" ] || {
        echo -n ' Adding symlink for using InnoDB Barracuda format... '
        ln -s "${SERVICE_ROOT_DIR}/etc/mysql/conf.d/innodb_barracuda_format.cnf" \
            "${ETC_DIR}/mysql/conf.d/innodb_barracuda_format.cnf"
    }
}

function ensure_innodb_barracuda_online () {
    SQL="
    SET GLOBAL innodb_file_format = Barracuda;
    SET GLOBAL innodb_file_format_max = Barracuda;
    # SET GLOBAL innodb_compression_level = 6;
    "
    mysql ${MYSQL_CONNECTION_PARAMS} -e "$SQL"
}

function _alter_tables () {
    local modification="$1"
    SQL="
    USE INFORMATION_SCHEMA;
    SELECT CONCAT(\"ALTER TABLE \`\", TABLE_SCHEMA,\"\`.\`\", TABLE_NAME, \"\` ${modification};\") AS MySQLCMD
        FROM TABLES
        WHERE ENGINE = \"InnoDB\";
    "
    SQL=$(mysql ${MYSQL_CONNECTION_PARAMS} --batch --skip-column-names -e "$SQL")
    readarray -t SQL <<<"$SQL"

    echo -n " Altering ${#SQL[@]} tables... "

    for statement in "${SQL[@]}"; do
        echo -n '.'
        mysql ${MYSQL_CONNECTION_PARAMS} -e "${statement}"
    done
}

function set_innodb_table_row_format () {
    FORMAT=$1
    _alter_tables "ROW_FORMAT=${FORMAT}"
}

# NOTE: AFAIK only supported by Fusion-io.
# function enable_innodb_table_page_compression () {
#     _alter_tables "PAGE_COMPRESSED=1"
# }

# NOTE: AFAIK only supported by Fusion-io.
# function disable_innodb_table_page_compression () {
#     _alter_tables "PAGE_COMPRESSED=0"
# }

function mysql.list_tables_like () {
    local database="$1"
    local pattern="$2"
    local sql="
        SET group_concat_max_len = 10240;
        SELECT GROUP_CONCAT(table_name separator ' ')
        FROM information_schema.tables WHERE table_schema='${database}'
        AND table_name LIKE '${pattern}'
    "
    local output=$(mysql ${MYSQL_CONNECTION_PARAMS} -AN -e "${sql}")
    if [ "${output}" != "NULL" ]; then
        echo "${output}"
    else
        echo "INFO: No tables found in database ${database} like: ${pattern}" >&2
    fi
}


function main () {
    case "$COMMAND" in
        'disable-init-script')
            sudo sh -c 'echo "manual" > /etc/init/mysql.override'
        ;;

        'enable-init-script')
            sudo rm '/etc/init/mysql.override'
        ;;

        'install')
            mysql_install_db --defaults-file="${MYSQL_CONF}"
            $0 start
            proc.wait_for_pid_in_file "${MYSQL_PID}"
            mysqladmin --defaults-file="${MYSQL_CONF}" -u "${MYSQL_USER}" password "${MYSQL_PASS}"
            # mysqladmin --defaults-file="${MYSQL_CONF}" -h localhost -u "${MYSQL_USER}" password "${MYSQL_PASS}"
        ;;

        'reconfigure')
            fill "$(cat ${ETC_DIR}/mysql/mysql.conf)" > ${MYSQL_CONF}
            fill "$(cat ${ETC_DIR}/mysql/mysql-admin.conf)" > ${MYSQL_ADMIN_CONF}
        ;;

        'start')
            start-stop-daemon --start --quiet --pidfile "$MYSQL_PID" --chdir "$BASE_DIR" --background --exec /usr/sbin/mysqld \
                --test \
                || exit 97
            start-stop-daemon --start --pidfile "$MYSQL_PID" --chdir "$BASE_DIR" --background --exec /usr/sbin/mysqld \
                -- --defaults-file="${MYSQL_CONF}"
        ;;

        'stop')
            start-stop-daemon --stop --pidfile "$MYSQL_PID" --retry 30
            RETVAL="$?"
            [ "$RETVAL" = 2 ] && exit 2
            [ "$RETVAL" = 1 ] && exit 98
            rm -f ${MYSQL_PID}
            exit "$RETVAL"
        ;;

        'restart')
            $0 stop
            RETVAL=$?
            if [ $RETVAL = 0 ] || [ $RETVAL = 98 ]; then
                $0 start
            else
                exit "$RETVAL"
            fi
        ;;

        'mysql-shell')
            echo  # Put the prompt into a new line.
            mysql ${MYSQL_CONNECTION_PARAMS} ${@:2}
        ;;

        'mytop')
            mytop --socket="${MYSQL_SOCKET}"
        ;;

        'mysqltuner')
            mysqltuner --forcemem 8192 --forceswap 8192 --socket="${MYSQL_SOCKET}"
        ;;

        'set-innodb-table-row-format-compact')
            echo -n '.'
            ensure_innodb_barracuda_config
            echo -n '.'
            ensure_innodb_barracuda_online
            echo -n '.'
            set_innodb_table_row_format COMPACT

            echo -n ' '
        ;;

        'set-innodb-table-row-format-compressed')
            echo -n '.'
            ensure_innodb_barracuda_config
            echo -n '.'
            ensure_innodb_barracuda_online
            echo -n '.'
            set_innodb_table_row_format COMPRESSED

            echo -n ' '
        ;;

        # NOTE: AFAIK only supported by Fusion-io.
        # 'enable-innodb-table-page-compression')
        #     echo -n '.'
        #     ensure_innodb_barracuda_config
        #     echo -n '.'
        #     ensure_innodb_barracuda_online
        #     echo -n '.'
        #     enable_innodb_table_page_compression

        #     echo -n ' '
        # ;;

        # NOTE: AFAIK only supported by Fusion-io.
        # 'disable-innodb-table-page-compression')
        #     echo -n '.'
        #     ensure_innodb_barracuda_config
        #     echo -n '.'
        #     ensure_innodb_barracuda_online
        #     echo -n '.'
        #     disable_innodb_table_page_compression

        #     echo -n ' '
        # ;;

        'backup')
            requested_database="$2"
            requested_tables=("${@:3}")
            databases=($(echo "show databases;" | mysql ${MYSQL_CONNECTION_PARAMS} -B -N | grep -v -E '^(information_schema|mysql|performance_schema)$'))
            for database in "${databases[@]}"; do
                if [ -n "${requested_database}" ] && [ "${database}" != "${requested_database}" ]; then
                    continue
                fi
                echo -n "${database}... "
                backup_dir="${MYSQL_BACKUP_DIR}/${database}"
                if [ -z "${requested_tables}" ]; then
                    rm -rf "${backup_dir}"
                fi
                mkdir -p "${backup_dir}"
                tables=()
                if [ -n "${requested_tables}" ]; then
                    for pattern in "${requested_tables[@]}"; do
                        tables+=$(mysql.list_tables_like "${database}" "${pattern}")
                    done
                    if [ -z "${tables[@]}" ]; then
                        echo "WARNING: None of the requested tables could be found. Avoiding complete dump!"
                        continue
                    fi
                fi
                mysqldump ${MYSQL_CONNECTION_PARAMS} -T "${backup_dir}" "${database}" ${tables[@]}
            done
        ;;

        'restore')
            # https://mariadb.com/kb/en/mariadb/documentation/optimization-and-tuning/query-optimizations/how-to-quickly-insert-data-into-mariadb/
            requested_database="$2"
            # requested_tables=("${@:3}")
            prepare_sql_file="${SERVICE_ROOT_DIR}/scripts/mysql-import-optimizations.sql"
            databases=($(ls "${MYSQL_BACKUP_DIR}"))
            for database in "${databases[@]}"; do
                if [ -n "${requested_database}" ] && [ "${database}" != "${requested_database}" ]; then
                    continue
                fi
                echo  # Put the prompt into a new line.
                echo "Restoring database ${database}... "
                backup_dir="${MYSQL_BACKUP_DIR}/${database}"
                sql_files=($(ls -rt "${backup_dir}"/*.sql))
                data_files=($(ls -rt "${backup_dir}"/*.txt))
                # TODO should only not recreate when giving a table pattern...
                if [ -z "${requested_database}" ]; then
                    mysqladmin ${MYSQL_CONNECTION_PARAMS} -f drop "${database}" > /dev/null
                    mysqladmin ${MYSQL_CONNECTION_PARAMS} create "${database}"
                fi
                echo -n "Creating tables... "
                {
                    cat "${prepare_sql_file}"
                    for file in "${sql_files[@]}"; do
                        cat "${file}"
                        echo -n "." >&2
                    done
                } | mysql ${MYSQL_CONNECTION_PARAMS} "${database}"
                echo  # Put the prompt into a new line.
                echo "Importing data... "
                for file in "${data_files[@]}"; do
                    table_name=$(basename "${file}")
                    table_name=${table_name%%.*}
                    {
                        cat "${prepare_sql_file}"
                        echo "LOAD DATA INFILE '${file}' INTO TABLE ${table_name} CHARACTER SET UTF8;"
                    } | mysql ${MYSQL_CONNECTION_PARAMS} "${database}"
                    echo
                done | pv -l -s ${#data_files[@]} > /dev/null
            done
        ;;

        'NOOP')
            # NOOP
        ;;

        *)
            exit 99
        ;;
    esac
}


service.run_main "$@"
