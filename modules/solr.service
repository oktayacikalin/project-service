#!/bin/bash

# Service control script for managing stuff around Solr.
#
# @author    Oktay Acikalin <oktay.acikalin@gmail.com>
# @copyright Oktay Acikalin
# @license   MIT (LICENSE.txt)

[ -z "$SERVICE_DIR" ] && SERVICE_DIR=$(readlink -f $(dirname $0))
[ -z "$BASE_DIR" ] && source "${SERVICE_DIR}/service.conf"

import "lib/service.run_main"
import "lib/var.default"
import "lib/file.get_relative_path"

import "etc/default/solr"

export JETTY_HOME="$SOLR_HOME"
export JETTY_HOST="$SOLR_HOST"
export JETTY_PORT="$SOLR_PORT"
export JETTY_RUN="$SOLR_PID"
export JETTY_LOGS="$SOLR_LOGS"
export JAVA_OPTIONS="-Djava.util.logging.config.file=${SOLR_HOME}/${SOLR_LOGS_PROPERTIES_FILE}"

SERVICE_LOG_DIR="$SOLR_LOGS"

CACHE_DIR="${CACHE_DIR}/solr"

mkdir -p "${SOLR_HOME}" "${SOLR_PID}" "${SOLR_LOGS}" "${CACHE_DIR}"


function download_package () {
    echo -n "checking for solr package \"${package_file}\"... "
    curl -s "${SOLR_DOWNLOAD_URL}.md5" -o "${package_file}.md5"
    if ! md5sum --check --status "${package_file}.md5"; then
        echo "downloading package..."
        curl --progress-bar "${SOLR_DOWNLOAD_URL}" -o "${package_file}"
    fi
}


function install_package () {
    # Try to unpack the solr package.
    if ! tar xzf "${package_file}"; then
        echo "ERROR: Could not unpack package."
        exit 1
    fi

    # Move the interesting things into our working dir.
    rm -rf "${SOLR_HOME}"/*
    if ! mv "${package_file%.*}/example"/* "${SOLR_HOME}/"; then
        echo "ERROR: Could not move files into SOLR_HOME."
        exit 1
    fi

    # Prepare the configuration (copy, symlink, none).
    pushd "${SOLR_HOME}/solr" > /dev/null
    if [ "${SOLR_LINK_MODE}" == "symlink" ]; then
        rm -rf conf
        if ! ln -s "${SOLR_LINK_CONF_PATH}" "conf"; then
            echo "ERROR: Could not link to given solr configuration dir."
            exit 1
        fi
    elif [ "${SOLR_LINK_MODE}" == "copy" ]; then
        mkdir -p conf
        if ! cp -a "${SOLR_LINK_CONF_PATH}"/* conf/; then
            echo "ERROR: Could not copy given solr configuration dir."
            exit 1
        fi
    elif [ "${SOLR_LINK_MODE}" == "none" ]; then
        pass
    else
        echo "ERROR: Invalid link mode. Has to be one of: none, symlink, copy"
        exit 1
    fi
    popd > /dev/null

    # If the solr etc dir is not present, just symlink it to the defaults.
    if [ ! -e "${ETC_DIR}/solr" ]; then
        pushd "${ETC_DIR}" > /dev/null
        local relpath=$(file.get_relative_path "${ETC_DIR}" "${SERVICE_ROOT_DIR}/etc/solr")
        ln -s "${relpath}"
        popd > /dev/null
    fi

    # Now install our logging facility.
    sed "s!\${SOLR_LOGS}!${SOLR_LOGS}!g" "${ETC_DIR}/solr/logging.properties" > "${SOLR_HOME}/${SOLR_LOGS_PROPERTIES_FILE}"
}


# Customization of the installed configuration.
# Extend this for adding more customizations.
function customize_installation () {
    if [ ! -e "${SOLR_HOME}/solr/solr.xml-bak" ]; then
        cp -a "${SOLR_HOME}/solr/solr.xml" "${SOLR_HOME}/solr/solr.xml-bak"
    else
        cp -a "${SOLR_HOME}/solr/solr.xml-bak" "${SOLR_HOME}/solr/solr.xml"
    fi
    sed -i "s!collection1!${SOLR_DEFAULT_CORE_NAME}!g" "${SOLR_HOME}/solr/solr.xml"
}


function main () {
    case "$COMMAND" in
        'install')
            pushd "${CACHE_DIR}" > /dev/null
            local package_file="${SOLR_DOWNLOAD_URL##*/}"
            if [ ! -e "${package_file}" ] || [ ! -e "${package_file}.md5" ]; then
                download_package
            fi
            install_package
            customize_installation
            popd > /dev/null
        ;;

        'start')
            result=$("${SOLR_INIT_SCRIPT}" start)
            RETVAL="$?"
            grep --quiet -i 'process already running' <<< "$result" && {
                exit 97
            } || {
                [ "$RETVAL" != 0 ] && {
                    echo "$result"
                }
                exit "$RETVAL"
            }
        ;;

        'stop')
            result=$("${SOLR_INIT_SCRIPT}" stop)
            RETVAL="$?"
            grep --quiet -i 'no process in pidfile' <<< "$result" && {
                exit 98
            } || {
                [ "$RETVAL" != 0 ] && {
                    echo "$result"
                }
                exit "$RETVAL"
            }
        ;;

        'restart')
            $0 stop
            RETVAL=$?
            if [ $RETVAL = 0 ] || [ $RETVAL = 98 ]; then
                $0 start
            else
                exit "$RETVAL"
            fi
        ;;

        'clear-cache')
            # TODO flush solr cache instead of restart.
            $0 restart
        ;;

        'NOOP')
            # NOOP
        ;;

        *)
            exit 99
        ;;
    esac
}


service.run_main "$@"
