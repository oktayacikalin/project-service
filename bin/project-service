#!/bin/bash

# Main service control script which acts as a proxy for the others.
#
# @author    Oktay Acikalin <oktay.acikalin@gmail.com>
# @copyright Oktay Acikalin
# @license   MIT (LICENSE.txt)

export SERVICE_DIR="$(readlink -f $(dirname $0)/../service)"
source "${SERVICE_DIR}/service.conf"

mkdir -p "${VAR_DIR}"
mkdir -p "${LOG_DIR}"
mkdir -p "${PID_DIR}"

source "${SERVICE_ROOT_DIR}/lib/service.get_log_dir.sh"
source "${SERVICE_ROOT_DIR}/lib/service.get_log_file.sh"
source "${SERVICE_ROOT_DIR}/lib/service.get_commands.sh"
source "${SERVICE_ROOT_DIR}/lib/array.unique.sh"
source "${SERVICE_ROOT_DIR}/lib/array.contains.sh"

ALL_SERVICES=$(find "${SERVICE_ROOT_DIR}/" -name "*.service")

# TODO Implement ACTIVE_SERVICES services by filtering them from ALL_SERVICES.
ACTIVE_SERVICES=$(find "${SERVICE_DIR}/" -name "*.service")

function handle_action () {
    local COMMAND=$1
    shift

    local REQUESTED_SERVICES=$@
    local AFFECTED_SERVICES

    [ -z "$REQUESTED_SERVICES" ] && {
        AFFECTED_SERVICES=$ACTIVE_SERVICES
    } || {
        AFFECTED_SERVICES=()
        for request in $REQUESTED_SERVICES; do
            if [ "$request" = "all" ]; then
                AFFECTED_SERVICES+=($ACTIVE_SERVICES)
                continue
            fi
            local found=0
            for service in $ACTIVE_SERVICES; do
                [ "$(basename $service)" = "${request}.service" ] && {
                    found=1
                    AFFECTED_SERVICES+=($service)
                }
            done
            [ "$found" = 0 ] && {
                echo "Service not found: $request"
                exit 1
            }
        done
    }

    AFFECTED_SERVICES=($(array.unique "${AFFECTED_SERVICES[@]}"))

    # TODO project.service restart:nginx,php5-fpm,varnish,varnish produces duplicates
    # echo ${AFFECTED_SERVICES[@]}
    # exit

    case "$COMMAND" in
        'tail')
            local log_files=()
            for service in ${AFFECTED_SERVICES[@]}; do
                local log_dir=$(service.get_log_dir "$service")
                [ "$log_dir" ] && {
                    for log_file in $(find -L "${log_dir}/" -iname '*.log' -exec echo "'{}'" +); do
                        log_files+=("$log_file")
                    done
                }
                local log_file=$(service.get_log_file "$service")
                [ "$log_file" ] && {
                    log_files+=("$log_file")
                }
            done
            tail -F -n0 ${log_files[@]}
        ;;

        'help')
            for service in ${AFFECTED_SERVICES[@]}; do
                commands=$(service.get_commands "$service")
                commands=($(echo "$commands" | sed 's!NOOP!!g'))
                [ "$commands" ] && {
                    name=$(basename "$service")
                    echo "${name%.*}: ${commands[@]}"
                }
            done
        ;;

        *)
            for service in ${AFFECTED_SERVICES[@]}; do
                local commands=$(service.get_commands $service)
                array.contains "$COMMAND" "${commands[@]}" && {
                    local name=$(basename "$service")
                    echo -n "Executing $COMMAND on ${name%.*}: "
                    "$service" "$COMMAND" && echo "OK" || {
                        local err=$?
                        case "$err" in
                            97) echo "OK / NOOP";;  # already started
                            98) echo "OK / NOOP";;  # already stopped
                            99) echo "N/A";;
                            *) echo "FAILED";;
                        esac
                    }
                }
            done
        ;;
    esac
}

for action in $@; do
    action=($(tr ':' ' ' <<< $action))
    commands=($(tr ',' ' ' <<< ${action[0]}))
    services=($(tr ',' ' ' <<< ${action[1]}))
    for command in ${commands[@]}; do
        handle_action $command ${services[@]}
    done
done
