#!/bin/bash

# Main service control script which acts as a proxy for the others.
#
# @author    Oktay Acikalin <oktay.acikalin@gmail.com>
# @copyright Oktay Acikalin
# @license   MIT (LICENSE.txt)

export SERVICE_DIR="$(readlink -f $(dirname $0)/../service)"
source "${SERVICE_DIR}/service.conf"

import "lib/service.get_log_dir"
import "lib/service.get_log_file"
import "lib/service.get_commands"
import "lib/service.colorize_command"
import "lib/array.unique"
import "lib/array.contains"
import "lib/array.index"
import "lib/file.get_relative_path"

ALL_SERVICES=$(find "${SERVICE_ROOT_DIR}/" -name "*.service")

# TODO Implement ACTIVE_SERVICES services by filtering them from ALL_SERVICES.
ACTIVE_SERVICES=$(find "${SERVICE_DIR}/" -name "*.service")


function handle_command () {
    local command=${!1}
    local params=("${!2}")
    local REQUESTED_SERVICES=${!3}
    local AFFECTED_SERVICES

    if [ -z "$REQUESTED_SERVICES" ]; then
        AFFECTED_SERVICES=$ACTIVE_SERVICES
    else
        AFFECTED_SERVICES=()
        for request in $REQUESTED_SERVICES; do
            if [ "$command" = "enable-service" ] ; then
                if [ "$request" = "all" ]; then
                    echo "Please specify which services to enable!"
                    exit 1
                fi
                local found=0
                for service in $ALL_SERVICES; do
                    if [ "$(basename $service)" = "${request}.service" ]; then
                        for service_ in $ACTIVE_SERVICES; do
                            if [ "$(basename $service_)" = "${request}.service" ]; then
                                echo "Service already enabled: $request"
                                found=1
                                break
                            fi
                        done
                        if [ "$found" = 1 ] ; then
                            continue
                        fi
                        AFFECTED_SERVICES+=($service)
                    fi
                done
                continue
            fi

            if [ "$request" = "all" ]; then
                AFFECTED_SERVICES+=($ACTIVE_SERVICES)
                break
            fi

            local found=0
            for service in $ACTIVE_SERVICES; do
                if [ "$(basename $service)" = "${request}.service" ]; then
                    found=1
                    AFFECTED_SERVICES+=($service)
                fi
            done
            if [ "$found" = 0 ]; then
                echo "Service not found: $request"
                exit 1
            fi
        done
    fi

    AFFECTED_SERVICES=($(array.unique "${AFFECTED_SERVICES[@]}"))

    case "$command" in
        'tail')
            local log_files=()
            for service in ${AFFECTED_SERVICES[@]}; do
                local log_dir=$(service.get_log_dir "$service")
                if [ "$log_dir" ]; then
                    for log_file in $(find -L "${log_dir}/" -iname '*.log' -exec echo "'{}'" +); do
                        log_files+=("$log_file")
                    done
                fi
                local log_file=$(service.get_log_file "$service")
                if [ "$log_file" ]; then
                    log_files+=("$log_file")
                fi
            done
            tail -F -n0 ${log_files[@]}
        ;;

        'enable-service')
            pushd "${SERVICE_DIR}" > /dev/null
            for service in ${AFFECTED_SERVICES[@]}; do
                local relpath=$(file.get_relative_path "$SERVICE_DIR" "$service")
                ln -s "${relpath}"
                name=${service##*/}
                echo "Enabled service: ${name%.*}"
            done
            popd > /dev/null
        ;;

        'help')
            for service in ${AFFECTED_SERVICES[@]}; do
                commands=$(service.get_commands "$service")
                commands=($(echo "$commands" | sed 's!NOOP!!g'))
                local log_dir=$(service.get_log_dir "$service")
                local log_file=$(service.get_log_file "$service")
                if [ "$log_dir" ] || [ "$log_file" ]; then
                    commands+=(tail)
                fi
                commands+=(help)
                if [ "$commands" ]; then
                    name=${service##*/}
                    echo -en "${AC_FG_YELLOW}${name%.*}${AC_DIM}:${AC_RESET_DIM}${AC_FG_DEFAULT} "
                    for command in "${commands[@]}"; do
                        echo -ne "$(service.colorize_command "${command}") "
                    done
                    echo
                fi
            done
        ;;

        *)
            for service in ${AFFECTED_SERVICES[@]}; do
                local commands=$(service.get_commands $service)
                if array.contains "$command" "${commands[@]}"; then
                    local name=${service##*/}
                    echo -ne "$(service.colorize_command "${command}") ${AC_DIM}on${AC_RESET_DIM} ${AC_FG_YELLOW}${name%.*}${AC_FG_DEFAULT}: "
                    if "$service" "$command" "${params[@]}"; then
                        echo -e "${AC_FG_GREEN}OK${AC_FG_DEFAULT}"
                    else
                        local err=$?
                        case "$err" in
                            97) echo -e "${AC_DIM}OK / NOOP${AC_RESET_DIM}";;  # already started
                            98) echo -e "${AC_DIM}OK / NOOP${AC_RESET_DIM}";;  # already stopped
                            99) echo -e "${AC_DIM}N/A${AC_RESET_DIM}";;
                            *) echo -e "${AC_FG_RED}FAILED${AC_FG_DEFAULT}";;
                        esac
                    fi
                fi
            done
        ;;
    esac
}


mkdir -p "${VAR_DIR}" "${LOG_DIR}" "${PID_DIR}"

if array.contains "--" "$@"; then
    index=$(array.index "--" "$@")
    actions=("${@:1:$index}")
    params=("${@:$(expr $index + 2)}")
else
    actions=("$@")
    params=()
fi

for action in ${actions[@]}; do
    action=(${action//:/ })
    commands=(${action[0]//,/ })
    services=(${action[1]//,/ })
    for command in ${commands[@]}; do
        handle_command command params[@] services[@]
    done
done
